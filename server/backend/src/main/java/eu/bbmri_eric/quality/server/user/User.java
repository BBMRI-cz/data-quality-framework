package eu.bbmri_eric.quality.server.user;

import java.util.Objects;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

/**
 * User entity representing a user account in the system.
 * Follows domain-driven design principles with proper encapsulation.
 */
@Entity
@Table(name = "user_account")
class User {

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private final Long id;

  private final String username;
  private String password;

  /**
   * Constructor for creating a new user.
   *
   * @param username the username, must not be null
   * @param password the password, must not be null
   */
  protected User(String username, String password) {
    this.id = null; // Will be generated by JPA
    this.username = Objects.requireNonNull(username, "Username cannot be null");
    this.password = Objects.requireNonNull(password, "Password cannot be null");
  }

  /**
   * Default constructor for JPA.
   */
  protected User() {
    this.id = null;
    this.username = null;
    this.password = null;
  }

  public String getUsername() {
    return username;
  }

  public String getPassword() {
    return password;
  }

  public Long getId() {
    return id;
  }

  /**
   * Updates the user's password.
   *
   * @param newPassword the new password, must not be null
   */
  public void updatePassword(String newPassword) {
    this.password = Objects.requireNonNull(newPassword, "Password cannot be null");
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || getClass() != obj.getClass()) return false;
    User user = (User) obj;
    return Objects.equals(username, user.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(username);
  }

  @Override
  public String toString() {
    return "User{username='" + username + "'}";
  }
}
